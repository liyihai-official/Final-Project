/**
  * @file array
  */
#include "multi_array/base.cpp"
#include "multi_array/distribute.cpp"

#include "assert"
#include "types"

namespace final_project
{

typedef final_project::_detail::_types::_size_type          size_type;

  template <class T, size_type NumDims>
  class array 
  {
    public:
      typedef T   value_type;
      typedef T&  reference;
      
      typedef _detail::_multi_array::_array<T, NumDims>     array_type;
      typedef _detail::_types::_multi_array_shape<NumDims>  super_shape_type;

    public:
      template <typename ... Args>
      array(Args ... args)
      : _shape (std::make_unique<super_shape_type>(super_shape_type(args...))) ,
        _mat(std::make_unique<array_type>(super_shape_type(args...))) {}
    

    public:
      void fill(const T& value)                     { _mat->fill(value); }

      size_type size()                        { return _shape->size();   }
      size_type size()                 const  { return _shape->size();   }
      size_type shape(size_type index) const  { return (*_shape)[index]; }
      
      // template <typename ... Args>
      // reference operator() (Args ... args)    { return (*_mat)(args...); }
      // reference operator[] (size_type index)  { return (*_mat)[index];   }

    public:
      template <class U, size_type Dims>
      friend std::ostream& operator<<(std::ostream& os, const array<U, Dims>& in)
      { 
        os << *(in._mat);
        return os;
      }

    private:
      std::unique_ptr<super_shape_type> _shape;
      std::unique_ptr<array_type> _mat;
  };


  template <class T, size_type NumDims>
  class array_distribute
  {
    public:
      typedef T value_type;
      typedef T& reference;
      typedef const T& const_reference;

      typedef _detail::_multi_array::_array_distribute<T, NumDims>  array_type;
      typedef _detail::_types::_multi_array_shape<NumDims>          super_array_shape;
      
      typedef mpi::env  mpi_env;
    
    public:
      template <typename ... Args>
      array_distribute(mpi_env& env, Args ... args) 
      : _mat(std::make_unique<array_type>(super_array_shape(args ...), env)) 
      { }

      // template <typename ... Args>
      // reference operator()(Args ... args)     { return (*_mat)(args...); }
      // reference operator[] (size_type index)  { return (*_mat)[index];   }

    public:
      void fill(const_reference value) { _mat->fill(value); }

    private:
      std::unique_ptr<array_type>      _mat;

    public:
      template <class U, size_type Dims>
      friend std::ostream& operator<<(std::ostream& os, const array_distribute<U, Dims>& in)
      {
        os << *(in._mat);
        return os;
      }

  };


}